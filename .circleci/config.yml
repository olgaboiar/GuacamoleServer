# Java Gradle CircleCI 2.0 configuration file
version: 2
jobs:
  build:
    branches:
      only:
        - master
        - junit-ci
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/com.olgaboiar.guacomole

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      CC_TEST_REPORTER_ID: 722278bb799a47ea5089335791ee322297a86de19f6319355d697daad4051435

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
                     curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
                     chmod +x ./cc-test-reporter

      # run tests!
      - run: gradle test jacocoTestReport
      - run: gradle cucumber


#      - run:
#          name: Generate JaCoCo report
#          command: ./gradlew jacocoTestReport
#          command: ./gradlew clean build jacocoTestReport
      - run:
          name: Upload coverage to code climate
          command: |
            JACOCO_SOURCE_PATH=src/main/java
            ./cc-test-reporter format-coverage /build/reports/jacoco/test/jacocoTestReport.xml --input-type jacoco --debug
            ./cc-test-reporter upload-coverage --debug




